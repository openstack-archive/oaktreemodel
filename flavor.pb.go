// Code generated by protoc-gen-go. DO NOT EDIT.
// source: oaktreemodel/flavor.proto

package oaktreemodel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Flavor struct {
	Location   *Location         `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	Id         string            `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Name       string            `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	IsPublic   bool              `protobuf:"varint,4,opt,name=is_public,json=isPublic" json:"is_public,omitempty"`
	Disabled   bool              `protobuf:"varint,5,opt,name=disabled" json:"disabled,omitempty"`
	Ram        uint32            `protobuf:"varint,6,opt,name=ram" json:"ram,omitempty"`
	Vcpus      uint32            `protobuf:"varint,7,opt,name=vcpus" json:"vcpus,omitempty"`
	Disk       uint64            `protobuf:"varint,8,opt,name=disk" json:"disk,omitempty"`
	Ephemeral  uint32            `protobuf:"varint,9,opt,name=ephemeral" json:"ephemeral,omitempty"`
	Swap       uint64            `protobuf:"varint,10,opt,name=swap" json:"swap,omitempty"`
	RxtxFactor float32           `protobuf:"fixed32,11,opt,name=rxtx_factor,json=rxtxFactor" json:"rxtx_factor,omitempty"`
	Properties map[string]string `protobuf:"bytes,99,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Flavor) Reset()                    { *m = Flavor{} }
func (m *Flavor) String() string            { return proto.CompactTextString(m) }
func (*Flavor) ProtoMessage()               {}
func (*Flavor) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Flavor) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Flavor) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Flavor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Flavor) GetIsPublic() bool {
	if m != nil {
		return m.IsPublic
	}
	return false
}

func (m *Flavor) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *Flavor) GetRam() uint32 {
	if m != nil {
		return m.Ram
	}
	return 0
}

func (m *Flavor) GetVcpus() uint32 {
	if m != nil {
		return m.Vcpus
	}
	return 0
}

func (m *Flavor) GetDisk() uint64 {
	if m != nil {
		return m.Disk
	}
	return 0
}

func (m *Flavor) GetEphemeral() uint32 {
	if m != nil {
		return m.Ephemeral
	}
	return 0
}

func (m *Flavor) GetSwap() uint64 {
	if m != nil {
		return m.Swap
	}
	return 0
}

func (m *Flavor) GetRxtxFactor() float32 {
	if m != nil {
		return m.RxtxFactor
	}
	return 0
}

func (m *Flavor) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

type FlavorList struct {
	Flavors []*Flavor `protobuf:"bytes,1,rep,name=flavors" json:"flavors,omitempty"`
}

func (m *FlavorList) Reset()                    { *m = FlavorList{} }
func (m *FlavorList) String() string            { return proto.CompactTextString(m) }
func (*FlavorList) ProtoMessage()               {}
func (*FlavorList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *FlavorList) GetFlavors() []*Flavor {
	if m != nil {
		return m.Flavors
	}
	return nil
}

func init() {
	proto.RegisterType((*Flavor)(nil), "oaktreemodel.Flavor")
	proto.RegisterType((*FlavorList)(nil), "oaktreemodel.FlavorList")
}

func init() { proto.RegisterFile("oaktreemodel/flavor.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0xcb, 0xeb, 0xd3, 0x30,
	0x1c, 0x27, 0xed, 0x1e, 0xed, 0xb7, 0xbe, 0x08, 0x43, 0xe2, 0x14, 0x2c, 0xc3, 0x43, 0x4f, 0x1d,
	0x4c, 0x44, 0xf1, 0x71, 0x11, 0xdd, 0x69, 0x87, 0x91, 0xa3, 0x97, 0x91, 0xb5, 0xd9, 0x0c, 0x7d,
	0x24, 0x24, 0xd9, 0xdc, 0xfe, 0x28, 0xff, 0x47, 0x69, 0xb2, 0xcd, 0xee, 0xc7, 0xef, 0xf6, 0x79,
	0x92, 0xe4, 0xd3, 0xc2, 0x2b, 0xc9, 0x2a, 0xab, 0x39, 0x6f, 0x64, 0xc9, 0xeb, 0xf9, 0xae, 0x66,
	0x47, 0xa9, 0x73, 0xa5, 0xa5, 0x95, 0xf8, 0x49, 0xdf, 0x9a, 0xde, 0x07, 0x0b, 0xd9, 0x34, 0xb2,
	0xf5, 0xc1, 0xd9, 0xdf, 0x10, 0x46, 0x4b, 0xd7, 0xc4, 0x0b, 0x88, 0x6a, 0x59, 0x30, 0x2b, 0x64,
	0x4b, 0x50, 0x8a, 0xb2, 0x64, 0xf1, 0x32, 0xef, 0x17, 0xf3, 0xd5, 0xc5, 0xa5, 0xb7, 0x1c, 0x7e,
	0x06, 0x81, 0x28, 0x49, 0x90, 0xa2, 0x2c, 0xa6, 0x81, 0x28, 0x31, 0x86, 0x41, 0xcb, 0x1a, 0x4e,
	0x42, 0xa7, 0x38, 0x8c, 0x5f, 0x43, 0x2c, 0xcc, 0x46, 0x1d, 0xb6, 0xb5, 0x28, 0xc8, 0x20, 0x45,
	0x59, 0x44, 0x23, 0x61, 0xd6, 0x8e, 0xe3, 0x29, 0x44, 0xa5, 0x30, 0x6c, 0x5b, 0xf3, 0x92, 0x0c,
	0xbd, 0x77, 0xe5, 0xf8, 0x05, 0x84, 0x9a, 0x35, 0x64, 0x94, 0xa2, 0xec, 0x29, 0xed, 0x20, 0x9e,
	0xc0, 0xf0, 0x58, 0xa8, 0x83, 0x21, 0x63, 0xa7, 0x79, 0xd2, 0x1d, 0x5a, 0x0a, 0x53, 0x91, 0x28,
	0x45, 0xd9, 0x80, 0x3a, 0x8c, 0xdf, 0x40, 0xcc, 0xd5, 0x6f, 0xde, 0x70, 0xcd, 0x6a, 0x12, 0xbb,
	0xf4, 0x7f, 0xa1, 0x6b, 0x98, 0x3f, 0x4c, 0x11, 0xf0, 0x8d, 0x0e, 0xe3, 0xb7, 0x90, 0xe8, 0x93,
	0x3d, 0x6d, 0x76, 0xac, 0xb0, 0x52, 0x93, 0x24, 0x45, 0x59, 0x40, 0xa1, 0x93, 0x96, 0x4e, 0xc1,
	0x3f, 0x00, 0x94, 0x96, 0x8a, 0x6b, 0x2b, 0xb8, 0x21, 0x45, 0x1a, 0x66, 0xc9, 0xe2, 0xdd, 0xfd,
	0x42, 0x7e, 0xc9, 0x7c, 0x7d, 0x8b, 0xfd, 0x6c, 0xad, 0x3e, 0xd3, 0x5e, 0x6f, 0xfa, 0x0d, 0x9e,
	0x3f, 0xb0, 0xbb, 0x77, 0x56, 0xfc, 0xec, 0x36, 0x8f, 0x69, 0x07, 0xdd, 0x3b, 0x59, 0x7d, 0xe0,
	0x97, 0x65, 0x3d, 0xf9, 0x1c, 0x7c, 0x42, 0xb3, 0xaf, 0x00, 0xfe, 0x90, 0x95, 0x30, 0x16, 0xe7,
	0x30, 0xf6, 0x9f, 0xdd, 0x10, 0xe4, 0xee, 0x33, 0x79, 0xec, 0x3e, 0xf4, 0x1a, 0xfa, 0xfe, 0xf1,
	0xd7, 0x87, 0xbd, 0xb0, 0xb9, 0x54, 0xbc, 0x35, 0x96, 0x15, 0x55, 0x2e, 0xf5, 0x7e, 0x7e, 0x63,
	0xf3, 0x7e, 0xf7, 0x4b, 0x9f, 0x6c, 0x47, 0xee, 0x6f, 0x79, 0xff, 0x2f, 0x00, 0x00, 0xff, 0xff,
	0x70, 0xcc, 0x98, 0x75, 0x73, 0x02, 0x00, 0x00,
}

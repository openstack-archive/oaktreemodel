// Code generated by protoc-gen-go.
// source: floating_ip.proto
// DO NOT EDIT!

/*
Package oaktree is a generated protocol buffer package.

It is generated from these files:
	floating_ip.proto

It has these top-level messages:
	FloatingIP
	FloatingIPList
*/
package oaktree

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import oaktree1 "."

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FloatingIP_Status int32

const (
	FloatingIP_active FloatingIP_Status = 0
	FloatingIP_down   FloatingIP_Status = 1
	FloatingIP_error  FloatingIP_Status = 2
)

var FloatingIP_Status_name = map[int32]string{
	0: "active",
	1: "down",
	2: "error",
}
var FloatingIP_Status_value = map[string]int32{
	"active": 0,
	"down":   1,
	"error":  2,
}

func (x FloatingIP_Status) String() string {
	return proto.EnumName(FloatingIP_Status_name, int32(x))
}
func (FloatingIP_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type FloatingIP struct {
	Location          *oaktree1.Location `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	Id                string             `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	IsAttached        bool               `protobuf:"varint,3,opt,name=is_attached,json=isAttached" json:"is_attached,omitempty"`
	FixedIpAddress    string             `protobuf:"bytes,4,opt,name=fixed_ip_address,json=fixedIpAddress" json:"fixed_ip_address,omitempty"`
	FloatingIpAddress string             `protobuf:"bytes,5,opt,name=floating_ip_address,json=floatingIpAddress" json:"floating_ip_address,omitempty"`
	Network           string             `protobuf:"bytes,6,opt,name=network" json:"network,omitempty"`
	Port              string             `protobuf:"bytes,7,opt,name=port" json:"port,omitempty"`
	Status            FloatingIP_Status  `protobuf:"varint,8,opt,name=status,enum=oaktree.FloatingIP_Status" json:"status,omitempty"`
	Properties        map[string]string  `protobuf:"bytes,99,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *FloatingIP) Reset()                    { *m = FloatingIP{} }
func (m *FloatingIP) String() string            { return proto.CompactTextString(m) }
func (*FloatingIP) ProtoMessage()               {}
func (*FloatingIP) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FloatingIP) GetLocation() *oaktree1.Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *FloatingIP) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

type FloatingIPList struct {
	FloatingIps []*FloatingIP `protobuf:"bytes,1,rep,name=floating_ips,json=floatingIps" json:"floating_ips,omitempty"`
}

func (m *FloatingIPList) Reset()                    { *m = FloatingIPList{} }
func (m *FloatingIPList) String() string            { return proto.CompactTextString(m) }
func (*FloatingIPList) ProtoMessage()               {}
func (*FloatingIPList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FloatingIPList) GetFloatingIps() []*FloatingIP {
	if m != nil {
		return m.FloatingIps
	}
	return nil
}

func init() {
	proto.RegisterType((*FloatingIP)(nil), "oaktree.FloatingIP")
	proto.RegisterType((*FloatingIPList)(nil), "oaktree.FloatingIPList")
	proto.RegisterEnum("oaktree.FloatingIP_Status", FloatingIP_Status_name, FloatingIP_Status_value)
}

func init() { proto.RegisterFile("floating_ip.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x92, 0xc1, 0x8e, 0xda, 0x30,
	0x10, 0x86, 0x9b, 0x04, 0x42, 0x18, 0x50, 0x1a, 0x86, 0x1e, 0x2c, 0x2e, 0x45, 0xf4, 0x42, 0x0f,
	0xcd, 0x81, 0x4a, 0x55, 0x55, 0xa9, 0x07, 0x54, 0x75, 0xb5, 0x48, 0x1c, 0x50, 0xf6, 0x01, 0x90,
	0x37, 0x31, 0xbb, 0x16, 0x10, 0x47, 0xb6, 0x81, 0xe5, 0x49, 0xf7, 0x75, 0xd6, 0x38, 0xd9, 0x04,
	0xad, 0xb8, 0xcd, 0xfc, 0xf3, 0x8d, 0x3c, 0xff, 0x2f, 0xc3, 0x60, 0xb3, 0x13, 0x54, 0xf3, 0xfc,
	0x69, 0xcd, 0x8b, 0xb8, 0x90, 0x42, 0x0b, 0xec, 0x08, 0xba, 0xd5, 0x92, 0xb1, 0x51, 0x3f, 0x15,
	0xfb, 0xbd, 0xc8, 0x4b, 0x79, 0xf2, 0xea, 0x01, 0xdc, 0x55, 0xf0, 0x62, 0x85, 0x3f, 0x20, 0xd8,
	0x89, 0xd4, 0x74, 0x22, 0x27, 0xce, 0xd8, 0x99, 0xf6, 0x66, 0x83, 0xb8, 0x5a, 0x8c, 0x97, 0xd5,
	0x20, 0xa9, 0x11, 0x0c, 0xc1, 0xe5, 0x19, 0x71, 0x0d, 0xd8, 0x4d, 0x4c, 0x85, 0x5f, 0xa1, 0xc7,
	0xd5, 0x9a, 0x6a, 0x4d, 0xd3, 0x67, 0x96, 0x11, 0xcf, 0x0c, 0x82, 0x04, 0xb8, 0x9a, 0x57, 0x0a,
	0x4e, 0x21, 0xda, 0xf0, 0x17, 0x96, 0x99, 0xbb, 0xd6, 0x34, 0xcb, 0x24, 0x53, 0x8a, 0xb4, 0xec,
	0x7a, 0x68, 0xf5, 0x45, 0x31, 0x2f, 0x55, 0x8c, 0x61, 0x78, 0x65, 0xa2, 0x86, 0xdb, 0x16, 0xae,
	0xfd, 0x35, 0x3c, 0x81, 0x4e, 0xce, 0xf4, 0x49, 0xc8, 0x2d, 0xf1, 0x2d, 0xf3, 0xde, 0x22, 0x42,
	0xab, 0x10, 0x52, 0x93, 0x8e, 0x95, 0x6d, 0x8d, 0x33, 0xf0, 0x95, 0xa6, 0xfa, 0xa0, 0x48, 0x60,
	0xd4, 0x70, 0x36, 0xaa, 0x5d, 0x36, 0x61, 0xc4, 0x0f, 0x96, 0x48, 0x2a, 0x12, 0xff, 0x01, 0x98,
	0xcc, 0x0a, 0x26, 0x35, 0x67, 0x8a, 0xa4, 0x63, 0xcf, 0xa4, 0xf3, 0xed, 0xd6, 0xde, 0xaa, 0xa6,
	0xfe, 0xe7, 0x5a, 0x9e, 0x93, 0xab, 0xb5, 0xd1, 0x5f, 0xf8, 0xfc, 0x61, 0x8c, 0x11, 0x78, 0x5b,
	0x76, 0xb6, 0x71, 0x77, 0x93, 0x4b, 0x89, 0x5f, 0xa0, 0x7d, 0xa4, 0xbb, 0x03, 0xab, 0x92, 0x2d,
	0x9b, 0x3f, 0xee, 0x6f, 0x67, 0xf2, 0x1d, 0xfc, 0xf2, 0x2a, 0x04, 0xf0, 0x69, 0xaa, 0xf9, 0x91,
	0x45, 0x9f, 0x30, 0x80, 0x56, 0x26, 0x4e, 0x79, 0xe4, 0x60, 0x17, 0xda, 0x4c, 0x4a, 0x21, 0x23,
	0x77, 0x72, 0x0f, 0x61, 0x73, 0xd3, 0x92, 0x2b, 0x8d, 0xbf, 0xa0, 0x7f, 0x15, 0xa9, 0x32, 0x2f,
	0x5e, 0x2c, 0x0c, 0x6f, 0x58, 0x48, 0x7a, 0x4d, 0xc0, 0xea, 0xd1, 0xb7, 0x5f, 0xe5, 0xe7, 0x5b,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x1d, 0x8d, 0x18, 0x49, 0x56, 0x02, 0x00, 0x00,
}

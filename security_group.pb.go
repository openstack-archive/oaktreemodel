// Code generated by protoc-gen-go. DO NOT EDIT.
// source: oaktreemodel/security_group.proto

package oaktreemodel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SecurityGroupRule_Direction int32

const (
	SecurityGroupRule_ingress SecurityGroupRule_Direction = 0
	SecurityGroupRule_egress  SecurityGroupRule_Direction = 1
)

var SecurityGroupRule_Direction_name = map[int32]string{
	0: "ingress",
	1: "egress",
}
var SecurityGroupRule_Direction_value = map[string]int32{
	"ingress": 0,
	"egress":  1,
}

func (x SecurityGroupRule_Direction) String() string {
	return proto.EnumName(SecurityGroupRule_Direction_name, int32(x))
}
func (SecurityGroupRule_Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{0, 0}
}

type SecurityGroupRule struct {
	Location        *Location                   `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	Id              string                      `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Direction       SecurityGroupRule_Direction `protobuf:"varint,3,opt,name=direction,enum=oaktreemodel.SecurityGroupRule_Direction" json:"direction,omitempty"`
	Ethertype       string                      `protobuf:"bytes,4,opt,name=ethertype" json:"ethertype,omitempty"`
	PortRangeMin    uint32                      `protobuf:"varint,5,opt,name=port_range_min,json=portRangeMin" json:"port_range_min,omitempty"`
	PortRangeMax    uint32                      `protobuf:"varint,6,opt,name=port_range_max,json=portRangeMax" json:"port_range_max,omitempty"`
	Protocol        string                      `protobuf:"bytes,7,opt,name=protocol" json:"protocol,omitempty"`
	RemoteIpPrefix  string                      `protobuf:"bytes,8,opt,name=remote_ip_prefix,json=remoteIpPrefix" json:"remote_ip_prefix,omitempty"`
	SecurityGroupId string                      `protobuf:"bytes,9,opt,name=security_group_id,json=securityGroupId" json:"security_group_id,omitempty"`
	RemoteGroupId   string                      `protobuf:"bytes,10,opt,name=remote_group_id,json=remoteGroupId" json:"remote_group_id,omitempty"`
	Properties      map[string]string           `protobuf:"bytes,99,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SecurityGroupRule) Reset()                    { *m = SecurityGroupRule{} }
func (m *SecurityGroupRule) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupRule) ProtoMessage()               {}
func (*SecurityGroupRule) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *SecurityGroupRule) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *SecurityGroupRule) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SecurityGroupRule) GetDirection() SecurityGroupRule_Direction {
	if m != nil {
		return m.Direction
	}
	return SecurityGroupRule_ingress
}

func (m *SecurityGroupRule) GetEthertype() string {
	if m != nil {
		return m.Ethertype
	}
	return ""
}

func (m *SecurityGroupRule) GetPortRangeMin() uint32 {
	if m != nil {
		return m.PortRangeMin
	}
	return 0
}

func (m *SecurityGroupRule) GetPortRangeMax() uint32 {
	if m != nil {
		return m.PortRangeMax
	}
	return 0
}

func (m *SecurityGroupRule) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *SecurityGroupRule) GetRemoteIpPrefix() string {
	if m != nil {
		return m.RemoteIpPrefix
	}
	return ""
}

func (m *SecurityGroupRule) GetSecurityGroupId() string {
	if m != nil {
		return m.SecurityGroupId
	}
	return ""
}

func (m *SecurityGroupRule) GetRemoteGroupId() string {
	if m != nil {
		return m.RemoteGroupId
	}
	return ""
}

func (m *SecurityGroupRule) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

type SecurityGroupRuleList struct {
	Rules []*SecurityGroupRule `protobuf:"bytes,1,rep,name=rules" json:"rules,omitempty"`
}

func (m *SecurityGroupRuleList) Reset()                    { *m = SecurityGroupRuleList{} }
func (m *SecurityGroupRuleList) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupRuleList) ProtoMessage()               {}
func (*SecurityGroupRuleList) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *SecurityGroupRuleList) GetRules() []*SecurityGroupRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type SecurityGroup struct {
	Location    *Location            `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	Id          string               `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Name        string               `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description string               `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Rules       []*SecurityGroupRule `protobuf:"bytes,5,rep,name=rules" json:"rules,omitempty"`
	Properties  map[string]string    `protobuf:"bytes,99,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SecurityGroup) Reset()                    { *m = SecurityGroup{} }
func (m *SecurityGroup) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroup) ProtoMessage()               {}
func (*SecurityGroup) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *SecurityGroup) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *SecurityGroup) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SecurityGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SecurityGroup) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SecurityGroup) GetRules() []*SecurityGroupRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *SecurityGroup) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

type SecurityGroupList struct {
	SecurityGroups []*SecurityGroup `protobuf:"bytes,1,rep,name=security_groups,json=securityGroups" json:"security_groups,omitempty"`
}

func (m *SecurityGroupList) Reset()                    { *m = SecurityGroupList{} }
func (m *SecurityGroupList) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupList) ProtoMessage()               {}
func (*SecurityGroupList) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *SecurityGroupList) GetSecurityGroups() []*SecurityGroup {
	if m != nil {
		return m.SecurityGroups
	}
	return nil
}

func init() {
	proto.RegisterType((*SecurityGroupRule)(nil), "oaktreemodel.SecurityGroupRule")
	proto.RegisterType((*SecurityGroupRuleList)(nil), "oaktreemodel.SecurityGroupRuleList")
	proto.RegisterType((*SecurityGroup)(nil), "oaktreemodel.SecurityGroup")
	proto.RegisterType((*SecurityGroupList)(nil), "oaktreemodel.SecurityGroupList")
	proto.RegisterEnum("oaktreemodel.SecurityGroupRule_Direction", SecurityGroupRule_Direction_name, SecurityGroupRule_Direction_value)
}

func init() { proto.RegisterFile("oaktreemodel/security_group.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 513 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0x5f, 0x8b, 0xd3, 0x4e,
	0x14, 0xfd, 0xa5, 0xff, 0xb6, 0xb9, 0xdd, 0xfe, 0xd9, 0xe1, 0xa7, 0xc4, 0x2a, 0x18, 0xcb, 0x22,
	0x51, 0x21, 0x85, 0xca, 0xa2, 0x28, 0xbe, 0xc8, 0xca, 0xb2, 0xb8, 0xea, 0x32, 0x3e, 0xe9, 0x4b,
	0x88, 0xc9, 0xb5, 0x0e, 0x4d, 0x32, 0xc3, 0xcc, 0x44, 0xda, 0xef, 0xe8, 0x27, 0xf0, 0xd3, 0x48,
	0x27, 0x6d, 0x9a, 0x74, 0x65, 0x17, 0x41, 0xdf, 0xe6, 0x9e, 0x7b, 0xee, 0x49, 0xce, 0x9c, 0x3b,
	0xf0, 0x80, 0x87, 0x0b, 0x2d, 0x11, 0x53, 0x1e, 0x63, 0x32, 0x55, 0x18, 0xe5, 0x92, 0xe9, 0x55,
	0x30, 0x97, 0x3c, 0x17, 0xbe, 0x90, 0x5c, 0x73, 0x72, 0x58, 0xa5, 0x8c, 0xef, 0xd4, 0x06, 0x22,
	0x9e, 0xa6, 0x3c, 0x2b, 0x88, 0x93, 0x9f, 0x2d, 0x38, 0xfa, 0xb8, 0x51, 0x38, 0x5b, 0x0b, 0xd0,
	0x3c, 0x41, 0x32, 0x83, 0x6e, 0xc2, 0xa3, 0x50, 0x33, 0x9e, 0x39, 0x96, 0x6b, 0x79, 0xbd, 0xd9,
	0x6d, 0xbf, 0xaa, 0xe1, 0x5f, 0x6c, 0xba, 0xb4, 0xe4, 0x91, 0x01, 0x34, 0x58, 0xec, 0x34, 0x5c,
	0xcb, 0xb3, 0x69, 0x83, 0xc5, 0xe4, 0x0c, 0xec, 0x98, 0x49, 0x8c, 0x8c, 0x48, 0xd3, 0xb5, 0xbc,
	0xc1, 0xec, 0x51, 0x5d, 0xe4, 0xca, 0x77, 0xfd, 0xd3, 0xed, 0x00, 0xdd, 0xcd, 0x92, 0x7b, 0x60,
	0xa3, 0xfe, 0x86, 0x52, 0xaf, 0x04, 0x3a, 0x2d, 0xa3, 0xbf, 0x03, 0xc8, 0x31, 0x0c, 0x04, 0x97,
	0x3a, 0x90, 0x61, 0x36, 0xc7, 0x20, 0x65, 0x99, 0xd3, 0x76, 0x2d, 0xaf, 0x4f, 0x0f, 0xd7, 0x28,
	0x5d, 0x83, 0xef, 0x58, 0xb6, 0xcf, 0x0a, 0x97, 0x4e, 0x67, 0x9f, 0x15, 0x2e, 0xc9, 0x18, 0xba,
	0xe6, 0x56, 0x22, 0x9e, 0x38, 0x07, 0xe6, 0x43, 0x65, 0x4d, 0x3c, 0x18, 0x49, 0x4c, 0xb9, 0xc6,
	0x80, 0x89, 0x40, 0x48, 0xfc, 0xca, 0x96, 0x4e, 0xd7, 0x70, 0x06, 0x05, 0x7e, 0x2e, 0x2e, 0x0d,
	0x4a, 0x1e, 0xc3, 0x51, 0x3d, 0x93, 0x80, 0xc5, 0x8e, 0x6d, 0xa8, 0x43, 0x55, 0xb5, 0x7c, 0x1e,
	0x93, 0x87, 0x30, 0xdc, 0xa8, 0x96, 0x4c, 0x30, 0xcc, 0x7e, 0x01, 0x6f, 0x79, 0x1f, 0x00, 0x84,
	0xe4, 0x02, 0xa5, 0x66, 0xa8, 0x9c, 0xc8, 0x6d, 0x7a, 0xbd, 0xd9, 0xf4, 0xa6, 0xdb, 0xbc, 0x2c,
	0x27, 0xde, 0x64, 0x5a, 0xae, 0x68, 0x45, 0x62, 0xfc, 0x0a, 0x86, 0x7b, 0x6d, 0x32, 0x82, 0xe6,
	0x02, 0x57, 0x26, 0x6f, 0x9b, 0xae, 0x8f, 0xe4, 0x7f, 0x68, 0x7f, 0x0f, 0x93, 0x1c, 0x37, 0xa9,
	0x16, 0xc5, 0x8b, 0xc6, 0x73, 0x6b, 0x72, 0x0c, 0x76, 0x99, 0x15, 0xe9, 0xc1, 0x01, 0xcb, 0xe6,
	0x12, 0x95, 0x1a, 0xfd, 0x47, 0x00, 0x3a, 0x58, 0x9c, 0xad, 0xc9, 0x7b, 0xb8, 0x75, 0xe5, 0xaf,
	0x2e, 0x98, 0xd2, 0xe4, 0x04, 0xda, 0x32, 0x4f, 0x50, 0x39, 0x96, 0x71, 0x72, 0xff, 0x06, 0x27,
	0xb4, 0x60, 0x4f, 0x7e, 0x34, 0xa0, 0x5f, 0x6b, 0xfe, 0x95, 0x45, 0x25, 0xd0, 0xca, 0xc2, 0x14,
	0xcd, 0x8e, 0xda, 0xd4, 0x9c, 0x89, 0x0b, 0xbd, 0x18, 0x55, 0x24, 0x99, 0x30, 0xd2, 0xc5, 0xd6,
	0x55, 0xa1, 0x9d, 0x85, 0xf6, 0x9f, 0x58, 0x20, 0x6f, 0x7f, 0x13, 0xe4, 0x93, 0x6b, 0x66, 0xff,
	0x65, 0x88, 0x9f, 0xf6, 0x9e, 0xbe, 0x89, 0xe6, 0x14, 0x86, 0xf5, 0xed, 0xdd, 0x86, 0x74, 0xf7,
	0x3a, 0x87, 0x83, 0xda, 0x62, 0xab, 0xd7, 0xcf, 0x3e, 0x9f, 0xcc, 0x99, 0xf6, 0xb9, 0xc0, 0x4c,
	0xe9, 0x30, 0x5a, 0xf8, 0x5c, 0xce, 0xa7, 0x65, 0x35, 0xad, 0x2a, 0xbd, 0xac, 0x16, 0x5f, 0x3a,
	0xe6, 0xc1, 0x3d, 0xfd, 0x15, 0x00, 0x00, 0xff, 0xff, 0x03, 0xbf, 0x23, 0x4b, 0xe4, 0x04, 0x00,
	0x00,
}

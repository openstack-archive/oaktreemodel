// Code generated by protoc-gen-go. DO NOT EDIT.
// source: oaktreemodel/floating_ip.proto

package oaktreemodel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FloatingIP_Status int32

const (
	FloatingIP_active FloatingIP_Status = 0
	FloatingIP_down   FloatingIP_Status = 1
	FloatingIP_error  FloatingIP_Status = 2
)

var FloatingIP_Status_name = map[int32]string{
	0: "active",
	1: "down",
	2: "error",
}
var FloatingIP_Status_value = map[string]int32{
	"active": 0,
	"down":   1,
	"error":  2,
}

func (x FloatingIP_Status) String() string {
	return proto.EnumName(FloatingIP_Status_name, int32(x))
}
func (FloatingIP_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

type FloatingIP struct {
	Location          *Location         `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	Id                string            `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	IsAttached        bool              `protobuf:"varint,3,opt,name=is_attached,json=isAttached" json:"is_attached,omitempty"`
	FixedIpAddress    string            `protobuf:"bytes,4,opt,name=fixed_ip_address,json=fixedIpAddress" json:"fixed_ip_address,omitempty"`
	FloatingIpAddress string            `protobuf:"bytes,5,opt,name=floating_ip_address,json=floatingIpAddress" json:"floating_ip_address,omitempty"`
	Network           string            `protobuf:"bytes,6,opt,name=network" json:"network,omitempty"`
	Port              string            `protobuf:"bytes,7,opt,name=port" json:"port,omitempty"`
	Status            FloatingIP_Status `protobuf:"varint,8,opt,name=status,enum=oaktreemodel.FloatingIP_Status" json:"status,omitempty"`
	Properties        map[string]string `protobuf:"bytes,99,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *FloatingIP) Reset()                    { *m = FloatingIP{} }
func (m *FloatingIP) String() string            { return proto.CompactTextString(m) }
func (*FloatingIP) ProtoMessage()               {}
func (*FloatingIP) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *FloatingIP) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *FloatingIP) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FloatingIP) GetIsAttached() bool {
	if m != nil {
		return m.IsAttached
	}
	return false
}

func (m *FloatingIP) GetFixedIpAddress() string {
	if m != nil {
		return m.FixedIpAddress
	}
	return ""
}

func (m *FloatingIP) GetFloatingIpAddress() string {
	if m != nil {
		return m.FloatingIpAddress
	}
	return ""
}

func (m *FloatingIP) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *FloatingIP) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *FloatingIP) GetStatus() FloatingIP_Status {
	if m != nil {
		return m.Status
	}
	return FloatingIP_active
}

func (m *FloatingIP) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

type FloatingIPList struct {
	FloatingIps []*FloatingIP `protobuf:"bytes,1,rep,name=floating_ips,json=floatingIps" json:"floating_ips,omitempty"`
}

func (m *FloatingIPList) Reset()                    { *m = FloatingIPList{} }
func (m *FloatingIPList) String() string            { return proto.CompactTextString(m) }
func (*FloatingIPList) ProtoMessage()               {}
func (*FloatingIPList) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *FloatingIPList) GetFloatingIps() []*FloatingIP {
	if m != nil {
		return m.FloatingIps
	}
	return nil
}

func init() {
	proto.RegisterType((*FloatingIP)(nil), "oaktreemodel.FloatingIP")
	proto.RegisterType((*FloatingIPList)(nil), "oaktreemodel.FloatingIPList")
	proto.RegisterEnum("oaktreemodel.FloatingIP_Status", FloatingIP_Status_name, FloatingIP_Status_value)
}

func init() { proto.RegisterFile("oaktreemodel/floating_ip.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x41, 0x6f, 0xd3, 0x40,
	0x10, 0x85, 0x59, 0x27, 0x71, 0x93, 0x49, 0x15, 0xcc, 0x80, 0xd0, 0xd2, 0x03, 0xb5, 0x72, 0x32,
	0x17, 0x47, 0x0a, 0x42, 0x45, 0x54, 0x1c, 0x8a, 0x04, 0xa2, 0x52, 0x91, 0x2a, 0x73, 0xe3, 0x12,
	0x2d, 0xde, 0x6d, 0x58, 0x25, 0xf1, 0xac, 0x76, 0xa7, 0x2d, 0xfd, 0xc3, 0xfc, 0x0e, 0xc4, 0xc6,
	0x4d, 0x5c, 0xa4, 0xde, 0x76, 0xe6, 0x7d, 0xcf, 0x9a, 0xf7, 0x64, 0x78, 0x4d, 0x6a, 0xc5, 0xde,
	0x98, 0x0d, 0x69, 0xb3, 0x9e, 0x5d, 0xad, 0x49, 0xb1, 0x6d, 0x96, 0x0b, 0xeb, 0x4a, 0xe7, 0x89,
	0x09, 0x0f, 0xbb, 0xfa, 0xd1, 0xab, 0x07, 0x74, 0x4d, 0x9b, 0x0d, 0x35, 0x5b, 0x70, 0xfa, 0xa7,
	0x07, 0xf0, 0xa5, 0xb5, 0x9f, 0x5f, 0xe2, 0x1c, 0x86, 0x6b, 0xaa, 0x15, 0x5b, 0x6a, 0xa4, 0xc8,
	0x45, 0x31, 0x9e, 0xbf, 0x2c, 0xbb, 0xe6, 0xf2, 0xa2, 0x55, 0xab, 0x1d, 0x87, 0x13, 0x48, 0xac,
	0x96, 0x49, 0x2e, 0x8a, 0x51, 0x95, 0x58, 0x8d, 0xc7, 0x30, 0xb6, 0x61, 0xa1, 0x98, 0x55, 0xfd,
	0xcb, 0x68, 0xd9, 0xcb, 0x45, 0x31, 0xac, 0xc0, 0x86, 0xb3, 0x76, 0x83, 0x05, 0x64, 0x57, 0xf6,
	0xb7, 0xd1, 0x0b, 0xeb, 0x16, 0x4a, 0x6b, 0x6f, 0x42, 0x90, 0xfd, 0x68, 0x9f, 0xc4, 0xfd, 0xb9,
	0x3b, 0xdb, 0x6e, 0xb1, 0x84, 0xe7, 0x9d, 0x6c, 0x3b, 0x78, 0x10, 0xe1, 0x67, 0xf7, 0xd2, 0x9e,
	0x97, 0x70, 0xd0, 0x18, 0xbe, 0x25, 0xbf, 0x92, 0x69, 0x64, 0xee, 0x47, 0x44, 0xe8, 0x3b, 0xf2,
	0x2c, 0x0f, 0xe2, 0x3a, 0xbe, 0xf1, 0x04, 0xd2, 0xc0, 0x8a, 0xaf, 0x83, 0x1c, 0xe6, 0xa2, 0x98,
	0xcc, 0x8f, 0x1f, 0x46, 0xdd, 0xd7, 0x52, 0x7e, 0x8f, 0x58, 0xd5, 0xe2, 0xf8, 0x15, 0xc0, 0x79,
	0x72, 0xc6, 0xb3, 0x35, 0x41, 0xd6, 0x79, 0xaf, 0x18, 0xcf, 0x8b, 0x47, 0xcd, 0x97, 0x3b, 0xf4,
	0x73, 0xc3, 0xfe, 0xae, 0xea, 0x78, 0x8f, 0x3e, 0xc2, 0xd3, 0xff, 0x64, 0xcc, 0xa0, 0xb7, 0x32,
	0x77, 0xb1, 0xfd, 0x51, 0xf5, 0xef, 0x89, 0x2f, 0x60, 0x70, 0xa3, 0xd6, 0xd7, 0xa6, 0xed, 0x78,
	0x3b, 0x7c, 0x48, 0xde, 0x8b, 0xe9, 0x1b, 0x48, 0xb7, 0xa7, 0x21, 0x40, 0xaa, 0x6a, 0xb6, 0x37,
	0x26, 0x7b, 0x82, 0x43, 0xe8, 0x6b, 0xba, 0x6d, 0x32, 0x81, 0x23, 0x18, 0x18, 0xef, 0xc9, 0x67,
	0xc9, 0xf4, 0x1b, 0x4c, 0xf6, 0x37, 0x5d, 0xd8, 0xc0, 0x78, 0x0a, 0x87, 0x9d, 0x72, 0x83, 0x14,
	0x31, 0x87, 0x7c, 0x2c, 0x47, 0x35, 0xde, 0xf7, 0x1d, 0x3e, 0x9d, 0xfc, 0x78, 0xb7, 0xb4, 0x5c,
	0x92, 0x33, 0x4d, 0x60, 0x55, 0xaf, 0x4a, 0xf2, 0xcb, 0xd9, 0x6e, 0x9a, 0x75, 0xbf, 0x71, 0xda,
	0x1d, 0x7e, 0xa6, 0xf1, 0xbf, 0x7b, 0xfb, 0x37, 0x00, 0x00, 0xff, 0xff, 0xa9, 0x51, 0xe6, 0xb4,
	0xc2, 0x02, 0x00, 0x00,
}

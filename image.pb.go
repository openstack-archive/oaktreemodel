// Code generated by protoc-gen-go. DO NOT EDIT.
// source: oaktreemodel/image.proto

package oaktreemodel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DiskFormat_DiskFormatChoice int32

const (
	DiskFormat_qcow2 DiskFormat_DiskFormatChoice = 0
	DiskFormat_raw   DiskFormat_DiskFormatChoice = 1
	DiskFormat_vhd   DiskFormat_DiskFormatChoice = 2
	DiskFormat_iso   DiskFormat_DiskFormatChoice = 3
	DiskFormat_vmdk  DiskFormat_DiskFormatChoice = 4
	DiskFormat_vdi   DiskFormat_DiskFormatChoice = 5
	DiskFormat_ami   DiskFormat_DiskFormatChoice = 6
	DiskFormat_ari   DiskFormat_DiskFormatChoice = 7
	DiskFormat_aki   DiskFormat_DiskFormatChoice = 8
)

var DiskFormat_DiskFormatChoice_name = map[int32]string{
	0: "qcow2",
	1: "raw",
	2: "vhd",
	3: "iso",
	4: "vmdk",
	5: "vdi",
	6: "ami",
	7: "ari",
	8: "aki",
}
var DiskFormat_DiskFormatChoice_value = map[string]int32{
	"qcow2": 0,
	"raw":   1,
	"vhd":   2,
	"iso":   3,
	"vmdk":  4,
	"vdi":   5,
	"ami":   6,
	"ari":   7,
	"aki":   8,
}

func (x DiskFormat_DiskFormatChoice) String() string {
	return proto.EnumName(DiskFormat_DiskFormatChoice_name, int32(x))
}
func (DiskFormat_DiskFormatChoice) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 0}
}

type ContainerFormat_ContainerFormatChoice int32

const (
	ContainerFormat_bare   ContainerFormat_ContainerFormatChoice = 0
	ContainerFormat_docker ContainerFormat_ContainerFormatChoice = 1
	ContainerFormat_ovf    ContainerFormat_ContainerFormatChoice = 2
	ContainerFormat_ova    ContainerFormat_ContainerFormatChoice = 3
	ContainerFormat_ami    ContainerFormat_ContainerFormatChoice = 4
	ContainerFormat_ari    ContainerFormat_ContainerFormatChoice = 5
	ContainerFormat_aki    ContainerFormat_ContainerFormatChoice = 6
)

var ContainerFormat_ContainerFormatChoice_name = map[int32]string{
	0: "bare",
	1: "docker",
	2: "ovf",
	3: "ova",
	4: "ami",
	5: "ari",
	6: "aki",
}
var ContainerFormat_ContainerFormatChoice_value = map[string]int32{
	"bare":   0,
	"docker": 1,
	"ovf":    2,
	"ova":    3,
	"ami":    4,
	"ari":    5,
	"aki":    6,
}

func (x ContainerFormat_ContainerFormatChoice) String() string {
	return proto.EnumName(ContainerFormat_ContainerFormatChoice_name, int32(x))
}
func (ContainerFormat_ContainerFormatChoice) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor3, []int{1, 0}
}

type Image_Status int32

const (
	Image_active         Image_Status = 0
	Image_queued         Image_Status = 1
	Image_saving         Image_Status = 2
	Image_deleted        Image_Status = 3
	Image_killed         Image_Status = 4
	Image_pending_delete Image_Status = 5
	Image_deactivated    Image_Status = 6
)

var Image_Status_name = map[int32]string{
	0: "active",
	1: "queued",
	2: "saving",
	3: "deleted",
	4: "killed",
	5: "pending_delete",
	6: "deactivated",
}
var Image_Status_value = map[string]int32{
	"active":         0,
	"queued":         1,
	"saving":         2,
	"deleted":        3,
	"killed":         4,
	"pending_delete": 5,
	"deactivated":    6,
}

func (x Image_Status) String() string {
	return proto.EnumName(Image_Status_name, int32(x))
}
func (Image_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{2, 0} }

type DiskFormat struct {
}

func (m *DiskFormat) Reset()                    { *m = DiskFormat{} }
func (m *DiskFormat) String() string            { return proto.CompactTextString(m) }
func (*DiskFormat) ProtoMessage()               {}
func (*DiskFormat) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type ContainerFormat struct {
}

func (m *ContainerFormat) Reset()                    { *m = ContainerFormat{} }
func (m *ContainerFormat) String() string            { return proto.CompactTextString(m) }
func (*ContainerFormat) ProtoMessage()               {}
func (*ContainerFormat) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

type Image struct {
	Location        *Location                             `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	Id              string                                `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Name            string                                `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	MinRam          uint32                                `protobuf:"varint,4,opt,name=min_ram,json=minRam" json:"min_ram,omitempty"`
	MinDisk         uint64                                `protobuf:"varint,5,opt,name=min_disk,json=minDisk" json:"min_disk,omitempty"`
	Size            uint64                                `protobuf:"varint,6,opt,name=size" json:"size,omitempty"`
	VirtualSize     uint64                                `protobuf:"varint,7,opt,name=virtual_size,json=virtualSize" json:"virtual_size,omitempty"`
	ContainerFormat ContainerFormat_ContainerFormatChoice `protobuf:"varint,8,opt,name=container_format,json=containerFormat,enum=oaktreemodel.ContainerFormat_ContainerFormatChoice" json:"container_format,omitempty"`
	DiskFormat      DiskFormat_DiskFormatChoice           `protobuf:"varint,9,opt,name=disk_format,json=diskFormat,enum=oaktreemodel.DiskFormat_DiskFormatChoice" json:"disk_format,omitempty"`
	Checksum        string                                `protobuf:"bytes,10,opt,name=checksum" json:"checksum,omitempty"`
	CreatedAt       string                                `protobuf:"bytes,11,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt       string                                `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	Owner           string                                `protobuf:"bytes,13,opt,name=owner" json:"owner,omitempty"`
	IsPublic        bool                                  `protobuf:"varint,14,opt,name=is_public,json=isPublic" json:"is_public,omitempty"`
	IsProtected     bool                                  `protobuf:"varint,15,opt,name=is_protected,json=isProtected" json:"is_protected,omitempty"`
	Status          Image_Status                          `protobuf:"varint,16,opt,name=status,enum=oaktreemodel.Image_Status" json:"status,omitempty"`
	Locations       []string                              `protobuf:"bytes,17,rep,name=locations" json:"locations,omitempty"`
	DirectUrl       string                                `protobuf:"bytes,18,opt,name=direct_url,json=directUrl" json:"direct_url,omitempty"`
	Tags            []string                              `protobuf:"bytes,19,rep,name=tags" json:"tags,omitempty"`
	Properties      map[string]string                     `protobuf:"bytes,99,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *Image) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Image) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Image) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Image) GetMinRam() uint32 {
	if m != nil {
		return m.MinRam
	}
	return 0
}

func (m *Image) GetMinDisk() uint64 {
	if m != nil {
		return m.MinDisk
	}
	return 0
}

func (m *Image) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Image) GetVirtualSize() uint64 {
	if m != nil {
		return m.VirtualSize
	}
	return 0
}

func (m *Image) GetContainerFormat() ContainerFormat_ContainerFormatChoice {
	if m != nil {
		return m.ContainerFormat
	}
	return ContainerFormat_bare
}

func (m *Image) GetDiskFormat() DiskFormat_DiskFormatChoice {
	if m != nil {
		return m.DiskFormat
	}
	return DiskFormat_qcow2
}

func (m *Image) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

func (m *Image) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Image) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Image) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Image) GetIsPublic() bool {
	if m != nil {
		return m.IsPublic
	}
	return false
}

func (m *Image) GetIsProtected() bool {
	if m != nil {
		return m.IsProtected
	}
	return false
}

func (m *Image) GetStatus() Image_Status {
	if m != nil {
		return m.Status
	}
	return Image_active
}

func (m *Image) GetLocations() []string {
	if m != nil {
		return m.Locations
	}
	return nil
}

func (m *Image) GetDirectUrl() string {
	if m != nil {
		return m.DirectUrl
	}
	return ""
}

func (m *Image) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Image) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

type ImageList struct {
	Images []*Image `protobuf:"bytes,1,rep,name=images" json:"images,omitempty"`
}

func (m *ImageList) Reset()                    { *m = ImageList{} }
func (m *ImageList) String() string            { return proto.CompactTextString(m) }
func (*ImageList) ProtoMessage()               {}
func (*ImageList) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *ImageList) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

func init() {
	proto.RegisterType((*DiskFormat)(nil), "oaktreemodel.DiskFormat")
	proto.RegisterType((*ContainerFormat)(nil), "oaktreemodel.ContainerFormat")
	proto.RegisterType((*Image)(nil), "oaktreemodel.Image")
	proto.RegisterType((*ImageList)(nil), "oaktreemodel.ImageList")
	proto.RegisterEnum("oaktreemodel.DiskFormat_DiskFormatChoice", DiskFormat_DiskFormatChoice_name, DiskFormat_DiskFormatChoice_value)
	proto.RegisterEnum("oaktreemodel.ContainerFormat_ContainerFormatChoice", ContainerFormat_ContainerFormatChoice_name, ContainerFormat_ContainerFormatChoice_value)
	proto.RegisterEnum("oaktreemodel.Image_Status", Image_Status_name, Image_Status_value)
}

func init() { proto.RegisterFile("oaktreemodel/image.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 726 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x54, 0x5d, 0x6f, 0xdb, 0x36,
	0x14, 0xad, 0x2c, 0x59, 0x96, 0xae, 0xd2, 0x98, 0x63, 0xf7, 0xc1, 0x66, 0x1b, 0xa0, 0x79, 0x2f,
	0x1e, 0x06, 0x28, 0x80, 0x8b, 0x61, 0xc5, 0x86, 0x3d, 0x74, 0xd9, 0x06, 0x6c, 0xe8, 0x43, 0xa0,
	0x62, 0x2f, 0x7d, 0x98, 0xc1, 0x90, 0x8c, 0xc3, 0xe9, 0x83, 0x2e, 0x49, 0x29, 0xe8, 0xfe, 0xca,
	0xfe, 0x6c, 0x41, 0x4a, 0x72, 0xed, 0x20, 0x6f, 0xe7, 0x9e, 0x73, 0x48, 0xde, 0x7b, 0x7c, 0x2d,
	0x20, 0x8a, 0x56, 0x56, 0x0b, 0xd1, 0x28, 0x2e, 0xea, 0x4b, 0xd9, 0xd0, 0x9d, 0x28, 0xf6, 0x5a,
	0x59, 0x85, 0xcf, 0x8e, 0x95, 0x8b, 0xe7, 0x27, 0x3e, 0xa6, 0x9a, 0x46, 0xb5, 0x83, 0x71, 0x65,
	0x01, 0x7e, 0x93, 0xa6, 0xfa, 0x43, 0xe9, 0x86, 0xda, 0xd5, 0x2d, 0xa0, 0x8f, 0xd5, 0xd5, 0x9d,
	0x92, 0x4c, 0xe0, 0x14, 0xe6, 0xef, 0x98, 0xba, 0xdf, 0xa0, 0x27, 0x78, 0x01, 0xa1, 0xa6, 0xf7,
	0x28, 0x70, 0xa0, 0xbf, 0xe3, 0x68, 0xe6, 0x80, 0x34, 0x0a, 0x85, 0x38, 0x81, 0xa8, 0x6f, 0x78,
	0x85, 0x22, 0xaf, 0x71, 0x89, 0xe6, 0x0e, 0xd0, 0x46, 0xa2, 0xd8, 0x03, 0x2d, 0xd1, 0xc2, 0x83,
	0x4a, 0xa2, 0x64, 0xd5, 0xc0, 0xf2, 0x4a, 0xb5, 0x96, 0xca, 0x56, 0xe8, 0xf1, 0xe9, 0xb7, 0xf0,
	0xd9, 0x03, 0x6a, 0x7c, 0x3f, 0x81, 0xe8, 0x86, 0x6a, 0x81, 0x9e, 0x60, 0x80, 0x98, 0x2b, 0x56,
	0x09, 0x3d, 0x74, 0xa0, 0xfa, 0xdb, 0xa1, 0x03, 0xd5, 0x53, 0x14, 0x4e, 0xcf, 0x45, 0xd3, 0x73,
	0xf3, 0xe9, 0xb9, 0x78, 0xf5, 0xff, 0x02, 0xe6, 0x7f, 0xba, 0x74, 0xf0, 0x06, 0x92, 0x5a, 0x31,
	0x6a, 0xa5, 0x6a, 0x49, 0x90, 0x07, 0xeb, 0x6c, 0xf3, 0x79, 0x71, 0x1c, 0x4e, 0xf1, 0x7a, 0x54,
	0xcb, 0x83, 0x0f, 0x9f, 0xc3, 0x4c, 0x72, 0x32, 0xcb, 0x83, 0x75, 0x5a, 0xce, 0x24, 0xc7, 0x18,
	0xa2, 0x96, 0x36, 0x82, 0x84, 0x9e, 0xf1, 0x18, 0x7f, 0x01, 0x8b, 0x46, 0xb6, 0x5b, 0x4d, 0x1b,
	0x12, 0xe5, 0xc1, 0xfa, 0x69, 0x19, 0x37, 0xb2, 0x2d, 0x69, 0x83, 0x9f, 0x43, 0xe2, 0x04, 0x2e,
	0x4d, 0x45, 0xe6, 0x79, 0xb0, 0x8e, 0x4a, 0x67, 0x74, 0x21, 0xbb, 0x7b, 0x8c, 0xfc, 0x4f, 0x90,
	0xd8, 0xd3, 0x1e, 0xe3, 0x6f, 0xe0, 0xac, 0x97, 0xda, 0x76, 0xb4, 0xde, 0x7a, 0x6d, 0xe1, 0xb5,
	0x6c, 0xe4, 0xde, 0x38, 0xcb, 0x3f, 0x80, 0xd8, 0x14, 0xd4, 0xf6, 0xd6, 0x27, 0x45, 0x92, 0x3c,
	0x58, 0x9f, 0x6f, 0x5e, 0x9c, 0x8e, 0xf2, 0x20, 0xce, 0xe2, 0xd1, 0x78, 0xcb, 0x25, 0x3b, 0xa5,
	0xf1, 0x5f, 0x90, 0xb9, 0x6e, 0xa7, 0xab, 0x53, 0x7f, 0xf5, 0x77, 0xa7, 0x57, 0x7f, 0x5c, 0x92,
	0xe2, 0xe1, 0xbe, 0x94, 0xc0, 0x0f, 0x0c, 0xbe, 0x80, 0x84, 0xdd, 0x09, 0x56, 0x99, 0xae, 0x21,
	0xe0, 0xe3, 0x3a, 0xd4, 0xf8, 0x6b, 0x00, 0xa6, 0x05, 0xb5, 0x82, 0x6f, 0xa9, 0x25, 0x99, 0x57,
	0xd3, 0x91, 0x79, 0x65, 0x9d, 0xdc, 0xed, 0xf9, 0x24, 0x9f, 0x0d, 0xf2, 0xc8, 0xbc, 0xb2, 0xf8,
	0x53, 0x98, 0xab, 0xfb, 0x56, 0x68, 0xf2, 0xd4, 0x2b, 0x43, 0x81, 0xbf, 0x84, 0x54, 0x9a, 0xed,
	0xbe, 0xbb, 0xa9, 0x25, 0x23, 0xe7, 0x79, 0xb0, 0x4e, 0xca, 0x44, 0x9a, 0x6b, 0x5f, 0xbb, 0x6c,
	0x9d, 0xa8, 0x95, 0x15, 0xcc, 0x0a, 0x4e, 0x96, 0x5e, 0xcf, 0xa4, 0xb9, 0x9e, 0x28, 0xbc, 0x81,
	0xd8, 0x58, 0x6a, 0x3b, 0x43, 0x90, 0x1f, 0xfb, 0xe2, 0x74, 0x6c, 0xbf, 0x43, 0xc5, 0x1b, 0xef,
	0x28, 0x47, 0x27, 0xfe, 0x0a, 0xd2, 0x69, 0x55, 0x0c, 0xf9, 0x24, 0x0f, 0x5d, 0x9f, 0x07, 0xc2,
	0x8d, 0xc1, 0xa5, 0x16, 0xcc, 0x6e, 0x3b, 0x5d, 0x13, 0x3c, 0x8c, 0x31, 0x30, 0x7f, 0xeb, 0xda,
	0xed, 0x80, 0xa5, 0x3b, 0x43, 0x9e, 0xf9, 0x73, 0x1e, 0xe3, 0x2b, 0x80, 0xbd, 0x56, 0x7b, 0xa1,
	0xad, 0x14, 0x86, 0xb0, 0x3c, 0x5c, 0x67, 0x9b, 0x6f, 0x1f, 0x6b, 0xe4, 0xfa, 0xe0, 0xfa, 0xbd,
	0xb5, 0xfa, 0x7d, 0x79, 0x74, 0xec, 0xe2, 0x17, 0x58, 0x3e, 0x90, 0x31, 0x82, 0xb0, 0x12, 0xef,
	0xfd, 0xda, 0xa7, 0xa5, 0x83, 0x2e, 0xc4, 0x9e, 0xd6, 0x9d, 0x18, 0x97, 0x7b, 0x28, 0x7e, 0x9a,
	0xbd, 0x0c, 0x56, 0xff, 0x42, 0x3c, 0x8c, 0xe9, 0xfe, 0x74, 0x94, 0x59, 0xd9, 0x8f, 0x7f, 0xc0,
	0x77, 0x9d, 0xe8, 0x04, 0x47, 0x81, 0xc3, 0x86, 0xf6, 0xb2, 0xdd, 0xa1, 0x19, 0xce, 0x60, 0xc1,
	0x45, 0x2d, 0xac, 0xe0, 0x28, 0x74, 0x42, 0x25, 0xeb, 0x5a, 0x70, 0x14, 0x61, 0x0c, 0xe7, 0x7b,
	0xd1, 0x72, 0xd9, 0xee, 0xb6, 0x83, 0x01, 0xcd, 0xf1, 0x12, 0x32, 0x2e, 0xfc, 0x95, 0xee, 0xa7,
	0x44, 0xf1, 0xea, 0x25, 0xa4, 0x7e, 0x9e, 0xd7, 0xd2, 0x58, 0xfc, 0x3d, 0xc4, 0xfe, 0x3b, 0x66,
	0x48, 0xe0, 0x07, 0x7f, 0xf6, 0xc8, 0xe0, 0xe5, 0x68, 0xf9, 0xf5, 0xc7, 0xb7, 0x3f, 0xec, 0xa4,
	0x2d, 0xd4, 0x5e, 0xb4, 0xc6, 0x52, 0x56, 0x15, 0x4a, 0xef, 0x2e, 0x0f, 0xd5, 0xe5, 0xf1, 0xc9,
	0x9f, 0x8f, 0x8b, 0x9b, 0xd8, 0x7f, 0xfc, 0x5e, 0x7c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x8f,
	0x35, 0x84, 0x41, 0x05, 0x00, 0x00,
}
